from aceql import ProxyAuth


class ConnectionOptions(object):
    """Allows to create the Connection Options for the current session."""

    def __init__(self, *, proxies: dict = None, auth: ProxyAuth = None, password_is_session_id: bool = False,
                 gzip_result: bool = False, timeout: int = 0, request_headers: dict = None):
        self.__proxies = proxies;
        self.__auth = auth;
        self.__password_is_session_id = password_is_session_id
        self.__gzip_result = gzip_result
        self.__timeout = timeout
        self.__request_headers = request_headers
        """
            Creates the Connection Options for the current session

            Parameters
            ----------
            proxies : dict
                The proxy to use, can  be an authenticated proxy.
            auth : ProxyAuth
                aceql.ProxyAuth instance with proxy (username, password).
            password_is_session_id : bool
                Says if the password is the session_id generated by AceQL login method on server. To be used for authentication without password.
            gzip_result : bool
                Says if Remote ResultSet will be zipped before returned to client side.
            timeout : int
                the HTTP connection timeout in seconds. 0 means not timeout is used (default value).
            request_headers : dict
                the request headers to send to server for validation.
                
            Returns
            -------
            ConnectionOptions
                An object containing all connections options for this session
        """

    @property
    def proxies(self) -> str:
        return self.__proxies

    @property
    def auth(self) -> str:
        return self.__auth

    @property
    def password_is_session_id(self) -> bool:
        return self.__password_is_session_id

    @property
    def gzip_result(self) -> bool:
        return self.__gzip_result

    @property
    def timeout(self) -> int:
        return self.__timeout

    @property
    def request_headers(self) -> str:
        return self.__request_headers